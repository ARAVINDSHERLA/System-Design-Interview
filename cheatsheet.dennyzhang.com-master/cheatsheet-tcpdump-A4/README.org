* CheatSheet: tcpdump                                                 :Linux:
:PROPERTIES:
:type:     linux, networking
:export_file_name: cheatsheet-tcpdump-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-tcpdump-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/blob/master/cheatsheet-tcpdump-A4/cheatsheet-tcpdump-A4.pdf][cheatsheet-tcpdump-A4.pdf]], Category: [[https://cheatsheet.dennyzhang.com/category/linux/][linux]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-tcpdump-A4
- Related posts: [[https://cheatsheet.dennyzhang.com/cheatsheet-shell-A4][CheatSheet: shell]], [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]

File me [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/issues][Issues]] or star [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com][this repo]].
** Tcpdump basic
| Name                                  | Comment                              |
|---------------------------------------+--------------------------------------|
| List all network nics                 | =tcpdump -D=                         |
| Intercepts all eth0 packages          | =tcpdump -i eth0=                    |
| Intercepts all packages from a src ip | =tcpdump host 175.180.22.133=        |
| Intercepts lo nic for a given port    | =tcpdump -i lo 'port 8080' -vvv -XX= |
| Intercepts ICMP packets               | =tcpdump -i any -n -v 'icmp'=        |
| Saving captured packages to file      | =tcpdump -w myfile.cap=              |
| Reading package data from local file  | =tcpdump -r myfile.cap=              |
| Monitor udp packets instead of tcp    | =tcpdump 'udp'=                      |

** Tcpdump advanced
| Name                            | Comment                                                                         |
|---------------------------------+---------------------------------------------------------------------------------|
| Intercepts certain ICMP packets | =tcpdump -n -v 'icmp[icmptype] = icmp-echoreply or icmp[icmptype] = icmp-echo'= |
| Intercepts all SYN packets      | tcpdump 'tcp[tcpflags] & tcp-syn != 0'                                          |

** More Resources
License: Code is licentcpdump under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].

#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>

<a href="https://cheatsheet.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION: 
#+KEYWORDS: 
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-tcpdump-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-tcpdump-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-tcpdump-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-tcpdump-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:   
#+LINK_HOME: 
* more content                                                     :noexport:
** tcpdump
# TCPDump is a packet analyzer. It allows the user to intercept and display TCP/IP
# and other packets being transmitted or received over a network. (cf Wikipedia).
# Note: 173.194.40.120 => google.com

# Intercepts all packets on all interfaces from / to 173.194.40.120 port 80
# -nn => Disables name resolution for IP addresses and port numbers.
tcpdump -nn -i any host 173.194.40.120 and port 80

# Make a grep on tcpdump (ASCII)
# -A  => Show only ASCII in packets.
# -s0 => By default, tcpdump only captures 68 bytes.
tcpdump -i -A any host 173.194.40.120 and port 80 | grep 'User-Agent'

# With ngrep
# -d eth0 => To force eth0 (else ngrep work on all interfaces)
# -s0 => force ngrep to look at the entire packet. (Default snaplen: 65536 bytes)
ngrep 'User-Agent' host 173.194.40.120 and port 80

# Intercepts all packets on all interfaces from / to 8.8.8.8 or 173.194.40.127 on port 80
tcpdump 'host ( 8.8.8.8 or 173.194.40.127 ) and port 80' -i any

# Intercepts all packets SYN and FIN of each TCP session.
tcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0'

# To display SYN and FIN packets of each TCP session to a host that is not on our network
tcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net local_addr'

# To display all IPv4 HTTP packets that come or arrive on port 80 and that contain only data (no SYN, FIN no, no packet containing an ACK)
tcpdump 'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'

# Show content in hexa
# Change -x to -xx => show extra header (ethernet).
tcpdump -x

# Show content in hexa and ASCII
# Change -X to -XX => show extra header (ethernet).
tcpdump -X

# Note on packet maching:
# Port matching:
# - portrange 22-23
# - not port 22
# - port ssh
# - dst port 22
# - src port 22
#
# Host matching:
# - dst host 8.8.8.8
# - not dst host 8.8.8.8
# - src net 67.207.148.0 mask 255.255.255.0
# - src net 67.207.148.0/24
** TODO [#A] Blog: Tcpdump                                         :noexport:
| Item                                                                        | Comment                                                                         |
|-----------------------------------------------------------------------------+---------------------------------------------------------------------------------|
| tcpdump -i lo 'port 9107' -vvv -XX -s 0                                     | 默认至多打印96个package,　通过-s 0可以打印出所有的package                       |
| tcpdump -i lo 'port 9107' -vvv -XX -s 0 -f                                  | -f打印主机ip,　而非主机名                                                       |
| tcpdump -nn -i any 'host 192.168.75.236 ' -vvv -XX -s 0 -f                  | 不转义port number, host address                                                 |
| Package的flag                                                               | S(SYN),F(FIN),P(PUSH),R(RST),W(ECNCWR) or E(ECN-Echo), or a single`.'(no flags) |
| tcpdump -vvv -XX -s 0 -f -c 100 -nn -i eth0 'not port 22 and not port 3128' |                                                                                 |
*** TCP flags                                                      :noexport:
 http://en.wikipedia.org/wiki/Transmission_Control_Protocol\\
#+begin_example
     * Flags (9 bits) (aka Control bits) - contains 9 1-bit flags
         * NS (1 bit) - ECN-nonce concealment protection (added to header by RFC 3540).
         * CWR (1 bit) - Congestion Window Reduced (CWR) flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism (added to header by RFC 3168).
         * ECE (1 bit) - ECN-Echo indicates

             * If the SYN flag is set (1), that the TCP peer is ECN capable.
             * If the SYN flag is clear (0), that a packet with Congestion Experienced flag in IP header set is received during normal transmission (added to header by RFC 3168).

         * URG (1 bit) - indicates that the Urgent pointer field is significant
         * ACK (1 bit) - indicates that the Acknowledgment field is significant. All packets after the initial SYN packet sent by the client should have this flag set.
         * PSH (1 bit) - Push function. Asks to push the buffered data to the receiving application.
         * RST (1 bit) - Reset the connection
         * SYN (1 bit) - Synchronize sequence numbers. Only the first packet sent from each end should have this flag set. Some other flags change meaning based on this flag, and some are only valid for when it is set, and others when it is clear.
         * FIN (1 bit) - No more data from sender
#+end_example
*** TCP connection state                                           :noexport:
 http://en.wikipedia.org/wiki/Transmission_Control_Protocol\\
#+begin_example
    1. LISTENING : In case of a server, waiting for a connection request from any remote client.
    2. SYN-SENT : waiting for the remote peer to send back a TCP segment with the SYN and ACK flags set. (usually set by TCP clients)
    3. SYN-RECEIVED : waiting for the remote peer to send back an acknowledgment after having sent back a connection acknowledgment to the remote peer. (usually set by TCP servers)
    4. ESTABLISHED : The port is ready to receive/send data from/to the remote peer.
    5. FIN-WAIT-1 :
    6. CLOSE-WAIT : Indicated that the server is waiting for the application process on its end to signal that it is ready to close.
    7. FIN-WAIT-2 : Indicates that the client is waiting for the server's fin segment (which indicates the server's application process is ready to close and the server is ready to initiate its side of the connection termination)
    8. CLOSE-WAIT : The server receives notice from the local application that it is done. The server sends its fin to the client.
    9. LAST-ACK : Indicates that the server is in the process of sending its own fin segment (which indicates the server's application process is ready to close and the server is ready to initiate it's side of the connection termination )
   10. TIME-WAIT : Represents waiting for enough time to pass to be sure the remote peer received the acknowledgment of its connection termination request. According to RFC 793 a connection can stay in TIME-WAIT for a maximum of four minutes known as a MSL (maximum segment lifetime).
   11. CLOSED : Connection is closed
#+end_example
*** TCP的报文监听时,　发现前三个是TCP建立链接的报文(SYN, SYN, .); 后三个是TCP断开链接的报文(FIN, FIN, .) :noexport:
*** [#A] [问题] 如何使用tcpdump来监听某个pid的所甩数据通讯        :IMPORTANT:
*** [#A] 问题: 为什么总有一个报文的cksum显示为incorrect            :noexport:
#+begin_example
 15:29:58.225329 00:00:00:00:00:00 (oui Ethernet) > 00:00:00:00:00:00 (oui Ethernet), ethertype IPv4 (0x0800), length 74: (tos 0x0, ttl  64, id 17585, offset 0, flags [DF], proto: TCP (6), length: 60) 192.168.51.128.39751 > 192.168.51.128.9107: S, cksum 0x5ef3 (correct), 1870406958:1870406958(0) win 32768 <mss 16396,sackOK,timestamp 508715423 508712090,nop,wscale 7>
         0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
         0x0010:  003c 44b1 4000 4006 0dba c0a8 3380 c0a8  .<D.@.@.....3...
         0x0020:  3380 9b47 2393 6f7c 252e 0000 0000 a002  3..G#.o|%.......
         0x0030:  8000 5ef3 0000 0204 400c 0402 080a 1e52  ..^.....@......R
         0x0040:  619f 1e52 549a 0103 0307                 a..RT.....
 15:29:58.225447 00:00:00:00:00:00 (oui Ethernet) > 00:00:00:00:00:00 (oui Ethernet), ethertype IPv4 (0x0800), length 74: (tos 0x0, ttl  64, id 0, offset 0, flags [DF], proto: TCP (6), length: 60) 192.168.51.128.9107 > 192.168.51.128.39751: S, cksum 0x02aa (correct), 2884825920:2884825920(0) ack 1870406959 win 12288 <mss 16396,sackOK,timestamp 508715423 508715423,nop,wscale 7>
         0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
         0x0010:  003c 0000 4000 4006 526b c0a8 3380 c0a8  .<..@.@.Rk..3...
         0x0020:  3380 2393 9b47 abf2 f340 6f7c 252f a012  3.#..G...@o|%/..
         0x0030:  3000 02aa 0000 0204 400c 0402 080a 1e52  0.......@......R
         0x0040:  619f 1e52 619f 0103 0307                 a..Ra.....
 15:29:58.225515 00:00:00:00:00:00 (oui Ethernet) > 00:00:00:00:00:00 (oui Ethernet), ethertype IPv4 (0x0800), length 66: (tos 0x0, ttl  64, id 17586, offset 0, flags [DF], proto: TCP (6), length: 52) 192.168.51.128.39751 > 192.168.51.128.9107: ., cksum 0x9ace (correct), 1:1(0) ack 1 win 256 <nop,nop,timestamp 508715423 508715423>
         0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
         0x0010:  0034 44b2 4000 4006 0dc1 c0a8 3380 c0a8  .4D.@.@.....3...
         0x0020:  3380 9b47 2393 6f7c 252f abf2 f341 8010  3..G#.o|%/...A..
         0x0030:  0100 9ace 0000 0101 080a 1e52 619f 1e52  ...........Ra..R
         0x0040:  619f                                     a.
 15:29:58.253032 00:00:00:00:00:00 (oui Ethernet) > 00:00:00:00:00:00 (oui Ethernet), ethertype IPv4 (0x0800), length 89: (tos 0x0, ttl  64, id 17587, offset 0, flags [DF], proto: TCP (6), length: 75) 192.168.51.128.39751 > 192.168.51.128.9107: P, cksum 0xe88e (incorrect (-> 0xf680), 1:24(23) ack 1 win 256 <nop,nop,timestamp 508715451 508715423>
         0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
         0x0010:  004b 44b3 4000 4006 0da9 c0a8 3380 c0a8  .KD.@.@.....3...
         0x0020:  3380 9b47 2393 6f7c 252f abf2 f341 8018  3..G#.o|%/...A..
         0x0030:  0100 e88e 0000 0101 080a 1e52 61bb 1e52  ...........Ra..R
         0x0040:  619f 8001 0001 0000 000a 6765 7456 6572  a.........getVer
         0x0050:  7369 6f6e 0000 0000 00                   sion.....
 15:29:58.253056 00:00:00:00:00:00 (oui Ethernet) > 00:00:00:00:00:00 (oui Ethernet), ethertype IPv4 (0x0800), length 66: (tos 0x0, ttl  64, id 37598, offset 0, flags [DF], proto: TCP (6), length: 52) 192.168.51.128.9107 > 192.168.51.128.39751: ., cksum 0x9b1f (correct), 1:1(0) ack 24 win 96 <nop,nop,timestamp 508715451 508715451>
         0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
         0x0010:  0034 92de 4000 4006 bf94 c0a8 3380 c0a8  .4..@.@.....3...
         0x0020:  3380 2393 9b47 abf2 f341 6f7c 2546 8010  3.#..G...Ao|%F..
         0x0030:  0060 9b1f 0000 0101 080a 1e52 61bb 1e52  .`.........Ra..R
         0x0040:  61bb                                     a.
#+end_example
*** [#A] [question] 数据报文中,　前面若干字节的意义
*** [#A] [question] 数据报文中, ACK的序号是如何准确对应的
*** [question] DF的flags包是什么意思
*** useful link
    http://www.ha97.com/4550.html\\

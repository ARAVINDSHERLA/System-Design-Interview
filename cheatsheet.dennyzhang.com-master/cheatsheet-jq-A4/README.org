* JQ CheatSheet                                                     :Tools:
:PROPERTIES:
:type:     tool
:export_file_name: cheatsheet-jq-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-jq-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/blob/master/cheatsheet-jq-A4/cheatsheet-jq-A4.pdf][cheatsheet-jq-A4.pdf]], Category: [[https://cheatsheet.dennyzhang.com/category/tools/][tools]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-jq-A4
- Related posts: [[https://cheatsheet.dennyzhang.com/cheatsheet-vim-A4][Vim CheatSheet]], [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]

File me [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/issues][Issues]] or star [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com][this repo]].
** jq - parse json
| Name                                     | Command                                                      |
|------------------------------------------+--------------------------------------------------------------|
| jq remove double-quotes                  | [[https://stackoverflow.com/questions/44656515/how-to-remove-double-quotes-in-jq-output-for-parsing-json-files-in-bash][Use the -r option to emit raw strings.]] =jq -r ...=           |
| yq                                       | yq is a lightweight and portable command-line YAML processor |
| [[https://stackoverflow.com/questions/48964305/write-output-to-a-file-after-piped-to-jq][Write output to a file after piped to jq]] | some pipe -> jq . > /tmp/test.txt                            |
| [[http://mikefarah.github.io/yq/][Install yq]]                               |                                                              |

#+BEGIN_SRC sh
curl $es_ip:9200/$index_name/_stats?pretty | jq '._all.primaries'

curl $es_ip:9200/$index_name/_stats?pretty | jq '._all.primaries | .docs, .merges, .segments'

curl $es_ip:9200/$index_name/_stats?pretty | jq '.[0] | ._all: promaries}'

curl $es_ip:9200/$index_name/_stats?pretty | jq '._all.primaries.docs[]'

curl $es_ip:9200/$index_name/_stats?pretty | jq '._all.primaries.docs[], ._all.primaries.segments[]'

curl $es_ip:9200/$index_name/_stats?pretty | jq '._all.primaries[]' | jq '.docs'
#+END_SRC
** jq with watch
#+BEGIN_SRC sh
watch -n 0.5 "kubectl get configmaps map1 -o json | jq '.data[\"file1.conf\"]'"

watch "curl $es_ip:9200/$index_name/_stats?pretty | jq '._all.primaries | .docs, .merges, .segments'"
#+END_SRC
** k8s jq
#+BEGIN_SRC sh
# List pods and containers
kubectl get pods -o='custom-columns=PODS:.metadata.name,CONTAINERS:.spec.containers[*].name'

# List pods, containers and images
kubectl get pods -o='custom-columns=PODS:.metadata.name,CONTAINERS:.spec.containers[*].name,Images:.spec.containers[*].image'
#+END_SRC
** yq - parse yaml
| Name            | Command                                                      |
|-----------------+--------------------------------------------------------------|
| yq              | yq is a lightweight and portable command-line YAML processor |
| [[http://mikefarah.github.io/yq/][Install yq]]      |                                                              |
| yq parse fields | =yq r testbed.yaml my_ip=                                    |
** parse yaml with pipelines
#+BEGIN_SRC sh
cat test.yaml | yq - r my_ip
#+END_SRC
** More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].
#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>
<a href="https://cheatsheet.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>

<a href="https://www.linkedin.com/in/dennyzhang001"><img align="bottom" src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a>
<a href="https://github.com/dennyzhang"><img align="bottom"src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a>
<a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img align="bottom" src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-jq-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-jq-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-jq-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-jq-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* jq is a lightweight and flexible command-line JSON processor.    :noexport:
https://stedolan.github.io/jq/
https://stedolan.github.io/jq/tutorial/
** DONE ubuntu14.04 install jq 1.5
  CLOSED: [2017-03-31 Fri 11:01]
http://stackoverflow.com/questions/36462955/upgrading-jq-to-1-5-on-ubuntu

cd /tmp
wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
chmod +x jq-linux64
sudo cp jq-linux64 /usr/bin/jq
jq --version
** DONE grep for jq output: curl -s https://api.github.com/users/octocat/repos | jq '.' | cat
  CLOSED: [2017-08-20 Sun 17:06]
https://stackoverflow.com/questions/33247228/how-to-use-jq-in-a-shell-pipeline
curl -XGET --unix-socket /var/run/docker.sock http://localhost/containers/json | jq '.' | grep Status
** TODO [#A] jq print multiple fields
curl -XGET --unix-socket /var/run/docker.sock http://localhost/containers/json | jq '.[].Names[], .[].Status'
#+BEGIN_EXAMPLE
Detail: "/healthcheck-slack"
"/nginx"
"Up 25 seconds (health: starting)"
"Up About an hour (unhealthy)"
#+END_EXAMPLE
* TODO jq questions                                                :noexport:
** TODO jq get count                                               :noexport:
** TODO kubectl jq join
         kubectl get pod "$logspinner_pod_name" \
             --output=json \
             --namespace blackbox-tests \
             | jq --join-output .status.phase
* [#B] kubectl jsonpath support                                    :noexport:
https://kubernetes.io/docs/reference/kubectl/jsonpath/

kubectl get pods -o json
$ kubectl get pods -o=jsonpath='{@}'
$ kubectl get pods -o=jsonpath='{.items[0]}'
$ kubectl get pods -o=jsonpath='{.items[0].metadata.name}'
$ kubectl get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.startTime}{"\n"}{end}'

kubectl get pods -o=jsonpath='{.items[0].metadata.name}'

kubectl get pods -n oratos -o=jsonpath='{range .items[*]}{.metadata.name}:{.spec.containers[0].name}{"\t"}{.spec.containers[0].image}{"\n"}{end}'
* more content                                                     :noexport:
** jq
# Pretty print the json
jq "." < filename.json

# Access the value at key "foo"
jq '.foo'

# Access first list item
jq '.[0]'

# Slice & Dice
jq '.[2:4]'
jq '.[:3]'
jq '.[-2:]'
* TODO save jq output to text file                                 :noexport:
time curl -k -XGET "https://localhost/api/v1/admin/tenantsAdmin/" \
     -H "Authorization: $token" | jq
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO jq get the last one of the list                             :noexport:
* TODO jq -r                                                       :noexport:
* TODO jq select the last element                                  :noexport:
https://github.com/stedolan/jq/issues/509
#+BEGIN_EXAMPLE
https://oratos.ci.cf-app.com/teams/main/pipelines/namespace-drain/jobs/update-bosh-release/builds/42

root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds[].[-1].version"
jq: error: syntax error, unexpected '[', expecting FORMAT or QQSTRING_START (Unix shell quoting issues?) at <top-level>, line 1:
.builds[].[-1].version
jq: 1 compile error
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds.[1].version"
jq: error: syntax error, unexpected '[', expecting FORMAT or QQSTRING_START (Unix shell quoting issues?) at <top-level>, line 1:
.builds.[1].version
jq: 1 compile error
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds.[-1].version"
jq: error: syntax error, unexpected '[', expecting FORMAT or QQSTRING_START (Unix shell quoting issues?) at <top-level>, line 1:
.builds.[-1].version
jq: 1 compile error
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson
{"builds":{"bdd412b7-b364-4d5d-44b5-c9138aa58fe7":{"version":"v0.1"},"be9f0b9b-ae82-4efa-423a-9f4c775c29bd":{"version":"v0.2"}},"format-version":"2"}
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds.version"
null
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds[].version"
v0.1
v0.2
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds[].version" | tail -n1
v0.2
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds[].version[0]"
jq: error (at <stdin>:1): Cannot index string with number
root@145abaff-d8b7-41a3-75f0-3c98e57e585e:/tmp/build/f8b8f357/put-sink-resources-release# yq r releases/sink-resources-release/index.yml --tojson | jq -r ".builds[].version"
v0.1
v0.2
#+END_EXAMPLE

* TODO jq usage                                                    :noexport:
#+BEGIN_EXAMPLE
`curl "http://bematech-do-es-1:9200/_nodes/stats/indices/search" | jq '[ .nodes[] ] | sort_by(.indices.search.scroll_current) | [ .[] | { name: .name, scrolls: .indices.search.scroll_current } ]`


[1:44]
 ```  {
    "name": "bematech-do-es-18.localdomain",
    "scrolls": 134
  },
  {
    "name": "bematech-do-es-08.localdomain",
    "scrolls": 148
  },
  {
    "name": "bematech-do-es-07.localdomain",
    "scrolls": 187
  },
  {
    "name": "bematech-do-es-01.localdomain",
    "scrolls": 269
  }```
#+END_EXAMPLE
* jq command                                                       :noexport:
https://stackoverflow.com/questions/48090023/cant-store-output-of-jq-in-variable

result="\"my-service-03a21478653fb8a2b680\""
bosh_deployment=$(echo $result | jq -r .)

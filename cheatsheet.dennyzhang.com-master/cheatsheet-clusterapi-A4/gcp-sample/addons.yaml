# Note: kubectl apply the generated file after the cluster is provisioned
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: standard
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: glbc
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:controller:glbc
rules:
- apiGroups: [""]
  resources: ["secrets", "endpoints", "services", "pods", "nodes", "namespaces"]
  verbs: ["describe", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["events", "configmaps"]
  verbs: ["describe", "get", "list", "watch", "update", "create", "patch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["extensions"]
  resources: ["ingresses/status"]
  verbs: ["update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:controller:glbc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:controller:glbc
subjects:
- kind: ServiceAccount
  name: glbc
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: l7-default-backend
  namespace: kube-system
  labels:
    k8s-app: glbc
    kubernetes.io/name: "GLBC"
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: glbc
  template:
    metadata:
      labels:
        k8s-app: glbc
        name: glbc
    spec:
      containers:
      - name: default-http-backend
        # Any image is permissible as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-controller-config
  namespace: kube-system
data:
  gce.conf: |
    [global]
    token-url = nil
    network = default
    project-id = denny-gcp-test
    node-tags = test1-frbk5-worker
---
apiVersion: v1
kind: Service
metadata:
  # This must match the --default-backend-service argument of the l7 lb
  # controller and is required because GCE mandates a default backend.
  name: default-http-backend
  namespace: kube-system
  labels:
    k8s-app: glbc
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "GLBCDefaultBackend"
spec:
  # The default backend must be of type NodePort.
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    k8s-app: glbc
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: kube-system
  name: l7-lb-controller
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
  labels:
    k8s-app: glbc
    version: v1.1.1
    kubernetes.io/name: "GLBC"
spec:
  # There should never be more than 1 controller alive simultaneously.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: glbc
      version: v1.1.1
  template:
    metadata:
      labels:
        k8s-app: glbc
        version: v1.1.1
        name: glbc
    spec:
      serviceAccountName: glbc
      terminationGracePeriodSeconds: 600
      containers:
      - image: k8s.gcr.io/ingress-gce-glbc-amd64:v1.1.1
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8086
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/credentials/service-account.json
        name: l7-lb-controller
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
        command:
        - sh
        - -c
        - 'exec /glbc --gce-ratelimit=ga.Operations.Get,qps,10,100 --gce-ratelimit=alpha.Operations.Get,qps,10,100 --gce-ratelimit=ga.BackendServices.Get,qps,1.8,1 --gce-ratelimit=ga.HealthChecks.Get,qps,1.8,1 --gce-ratelimit=alpha.HealthChecks.Get,qps,1.8,1 --verbose --default-backend-service=kube-system/default-http-backend --sync-period=600s --running-in-cluster=true --use-real-cloud=true --config-file-path=/etc/ingress-config/gce.conf --healthz-port=8086 2>&1'
        volumeMounts:
        - mountPath: /etc/ingress-config
          name: cloudconfig
          readOnly: true
        - mountPath: /etc/credentials
          name: credentials
          readOnly: true
      volumes:
      - name: cloudconfig
        configMap:
          name: ingress-controller-config
      - name: credentials
        secret:
          secretName: glbc-gcp-key
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: glbc-gcp-key
  namespace: kube-system
data:
  service-account.json: ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAiZGVubnktZ2NwLXRlc3QiLAogICJwcml2YXRlX2tleV9pZCI6ICIyMWU1ZjU4NGNjZGE4ZGFlNDgxZmMyNTBjOWM1Y2YzODA0OWU4M2ZhIiwKICAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNXMzlCeW5hQ1hEUGxnXG5zZ29GdzdtYTUrbWp4VjB3a0tORDl2OERUQXpjdFJsbis0c2pUL0hjOHQ0SXNCaU1xYnZnQ0lVWVJDUU9CVUNLXG5kNkUrMGZZMG4rYmpVcHpFMTloY1NpbUpzMU80VmhQWXZidm5mNWlaRTZ3L3dHQnVXM0xXeWRCM1RlL0V5TVpXXG5iRTFuR2VaTXhFak5yY0o3Yjl5bzB4MFNNWkFzb2psazN0NFMrdkFZaEh0S2RDemhabCtrRGxUemlsOVBBNElkXG5uaW9hdzR1M1phYUtKVVpvMFl1bS9Wam4ranJhcWVUbVBoSmZZdlZrK3hGNXorV1VOeElQYVNFNXR0cVNlL3ByXG5kdG5GN21ZMmhyZHM0RS92RWNDNHhJNE1ZcTZvTC9hVHk3RithN0MxWjRzTTFtWmRhUytlTzhvMStMNUFrZk0xXG5jZk1mM0FWZEFnTUJBQUVDZ2dFQUd1Y1IzajRwTW9ZSHVheEZpVDJiVFBucGVXQnArNHp1NytHTkcyTm1MN3pEXG5LUDE3ay9KZmFFeU9OdkpmamtWOTBMYjBOSjJCNkZZYmFoVm0xVExQT2hjQkxxdStkSU1nZTJSbC83M1FRZUJuXG5iWkIzZnhJTGZkQTZPS3Z2QmY2Y2ZaeEM1ZU1weStjWkpyUHRJV05HNDQxa2hmaGo0MnJRNS9HdEQxOXpHK0lUXG5TaEp0UHU3RzdnVzFSNzZWbVU2OGxzYlM0UnFhaXU2YVAydTlJcEtqTWd6NHdjZjY5Y1FlaXF5WHZaVyt4THEvXG5JeFc3UGpRMlNQSzNtdlpPajY2MHRYd3lqUHJvR2ZYQVF2M3IyWWxtdzlQS3dmbGdIVUFtNS9BcXlFVUlPTXVCXG5HSXB0VDBvN0l5L2NzdlJ1NTBKZnI4aG5FODR0L3laZC9TY2NERWs2Z1FLQmdRREpXc0UySkFTd0xSOFlpYjV5XG45amdaczM4VENuOENvb1lHTHc1KzRLTk5wMElIdENTWjFQNVlqd3QrYUh2TnN4Nk15ZUFsbkxVN25yWVI4VVpmXG5uZHBKekYvTnZSZHB2Q0Mwd1kxc1UyOFFoVUJYNzJMYjdRUGorVWJ2ZW9NQkV3ZHhzREo5RDFaNWlVMW1SWnVJXG5INlRHcnJUQkRZR3hrUnFoVmNxay9OREd6UUtCZ1FDLzBlanJnZDNrZ2dMejloNzZ6dW40aUZkUXp2RnVzTzhjXG5Ca092UzNzZHE0cGphS3c2NDFKNFRRVjVBb3pWU2E5eStOREFkNEhicVJGckE1RDdZYmg1ZTFFQTZzZm1nQmQ5XG5CdmVFVkY3Um5PTzhwRmx2MVFJcEovWWlMTUhVbjdrbUNGNDhVNVFMakJNaTFTTkJoMDBzZUZxWEp0dzM1bHNmXG5mOFF5RU9DWTBRS0JnRjVGMjRoWnZNZ3ZtQXVKRWw0STRhTkc0d3dyTWVRdDY4b2haZ3dKYU93R2oyZkQ5QThDXG5Ka09ZVmExTmhnbDgvNlN6TC9yc0wvNUdCTURKMGtVYVJ3V2Vab3lSSjlFZGY4S2hqSEZYYnZ5eEpyc0ZIYWdTXG5oR3ZNWG1YcFdrUzZnQlcraFNVQWRXQlo1Sjhwbi9SUHZIbzVlZStaUDB1L3dGUWhNc3VrZ3F0UkFvR0JBTHduXG56ZjU5QThncWszVDBma3pzKytveTZ0czBNdlN1RDgyQWc1SUdTenkrVUYvVWcrUzdxT0NpUkhUL3dGOVRDUXVRXG43MHRycm5CbU5kU3Z5ZDRiYTlXVjFjNDlmbG9tV1dQbG1wTXVJMWdmT2ZDSGtjYzF2UW5iemY2VndvZXJLUFVhXG5qajFFaWxxTlN4UUcxNjltWlpmeWNvSUR0MDRKNG1aU2NJUGZ0RCtSQW9HQUlWSmNRZWtGTkM5ek5BanEzaWphXG41aEdtYWVLaGxjSVl6SWpPUFZMM1FVN09NUXFUZ2p0NlJXTUZTcGJYN2RYZU1MdXcvRHZncGdlcCs0N0dQc1lXXG5FdWVPQlFYT0h2YVREZWNTQS9KaGpVYkRkUERKbDJnL3MrWDlZakpaVFV6OGdMdWo3dlNMeHZ0STFja01xNXZKXG5ZSG5XWHBtWjJrakpqeittN3ZTOTR3RT1cbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsCiAgImNsaWVudF9lbWFpbCI6ICJsb2FkYmFsYW5jZXItdGVzdDEtZnJiazVAZGVubnktZ2NwLXRlc3QuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTExMzU1NTI1MjkzODM5Mzg2MjQzIiwKICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLAogICJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwKICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9sb2FkYmFsYW5jZXItdGVzdDEtZnJiazUlNDBkZW5ueS1nY3AtdGVzdC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIKfQo=

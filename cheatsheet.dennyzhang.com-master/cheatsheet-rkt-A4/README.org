* CheatSheet: rkt                                                   :Cloud:
:PROPERTIES:
:type:     kubernetes
:export_file_name: cheatsheet-rkt-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-rkt-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/blob/master/cheatsheet-rkt-A4/cheatsheet-rkt-A4.pdf][cheatsheet-rkt-A4.pdf]], Category: [[https://cheatsheet.dennyzhang.com/category/cloud/][Cloud]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-rkt-A4
- Related posts:  [[https://cheatsheet.dennyzhang.com/cheatsheet-docker-A4][Docker CheatSheet]], [[https://cheatsheet.dennyzhang.com/cheatsheet-kubernetes-A4][Kubectl CheatSheet]], [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]

File me [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/issues][Issues]] or star [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com][this repo]].
** rkt Basic
| Name                                      | Summary                                                                        |
|-------------------------------------------+--------------------------------------------------------------------------------|
| rkt                                       | Initiated by CoreOS                                                            |
| rkt key features                          | rkt doesn't need daemon to run containers; secure-by-default                   |
| rkt project overall status                | [[https://github.com/rkt/rkt/milestones][GitHub: rkt milestones]]                                                         |
| rkt supported linux distributions         | [[https://github.com/rkt/rkt/blob/master/Documentation/distributions.md][GitHub: Installing rkt on popular Linux distributions]]                          |
| [[https://github.com/rkt/rkt/blob/master/Documentation/trying-out-rkt.md#running-rkt-in-a-vagrant-virtual-machine][Try rkt with vagrant]]                      | =git clone https://github.com/rkt/rkt=, =cd rkt=, =vagrant up=                 |
| [[https://github.com/kubernetes/minikube/blob/master/docs/alternative_runtimes.md][Run rkt with minikube]]                     | =minikube start --network-plugin=cni --container-runtime=rkt=                  |
| Try rkt from web browser                  | [[https://www.katacoda.com/courses/coreos/rkt-hello-world][Link: KataKoda CoreOS Rkt - Hello World]]                                        |
| Run rkt container with coreos registry    | =sudo rkt run coreos.com/etcd:v3.1.7=                                          |
| Run rkt container with docker.io registry | =sudo rkt run docker://nginx:latest --insecure-options=image=                  |
| List all containers                       | =sudo rkt list=                                                                |
| Reference                                 | [[https://cheatsheet.dennyzhang.com/cheatsheet-docker-A4][CheatSheet: Docker]], [[https://cheatsheet.dennyzhang.com/cheatsheet-crio-A4][CheatSheet: CRI-O]], [[https://cheatsheet.dennyzhang.com/cheatsheet-rkt-A4][CheatSheet: rkt]], [[https://cheatsheet.dennyzhang.com/cheatsheet-containerd-A4][CheatSheet: containerd]] |
** rkt online usage
#+BEGIN_EXAMPLE
vagrant@ubuntu-xenial:~$ rkt --help
NAME:
	rkt - rkt, the application container runner

USAGE:
	rkt [command]

VERSION:
	1.30.0

COMMANDS:
	api-service		Run API service (experimental)
	cat-manifest		Inspect and print the pod manifest
	completion		Output shell completion code for the specified shell
	config			Print configuration for each stage in JSON format
	enter			Enter the namespaces of an app within a rkt pod
	export			Export an app from an exited pod to an ACI file
	fetch			Fetch image(s) and store them in the local store
	gc			Garbage collect rkt pods no longer in use
	image cat-manifest	Inspect and print the image manifest
	image export		Export a stored image to an ACI file
	image extract		Extract a stored image to a directory
	image gc		Garbage collect local store
	image list		List images in the local store
	image render		Render a stored image to a directory with all its dependencies
	image rm		Remove one or more images with the given IDs or image names from the local store
	image verify		Verify one or more rendered images in the local store
	list			List pods
	metadata-service	Run metadata service
	prepare			Prepare to run image(s) in a pod in rkt
	rm			Remove all files and resources associated with an exited pod
	run			Run image(s) in a pod in rkt
	run-prepared		Run a prepared application pod in rkt
	status			Check the status of a rkt pod
	stop			Stop a pod
	trust			Trust a key for image verification
	version			Print the version and exit
	help			Help about any command

DESCRIPTION:
	A CLI for running app containers on Linux.

	To get the help on any specific command, run "rkt help command".

OPTIONS:
      --debug[=false]			print out more debug information to stderr
      --dir=/var/lib/rkt		rkt data directory
      --insecure-options=none		comma-separated list of security features to disable. Allowed values: "none", "image", "tls", "ondisk", "http", "pubkey", "capabilities", "paths", "seccomp", "all-fetch", "all-run", "all"
      --local-config=/etc/rkt		local configuration directory
      --system-config=/usr/lib/rkt	system configuration directory
      --trust-keys-from-https[=false]	automatically trust gpg keys fetched from https
      --user-config=			user configuration directory
#+END_EXAMPLE
** More Resources
https://github.com/rkt/rkt

License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].

#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>

<a href="https://cheatsheet.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-rkt-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-rkt-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-rkt-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-rkt-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO rkt vs docker                                               :noexport:
https://stackoverflow.com/questions/40164597/container-technologies-docker-rkt-orchestration-kubernetes-gke-and-aws-cont

https://en.wikipedia.org/wiki/Linux_Foundation#Cloud_Foundry

rkt, a Cloud Native Computing Foundation project, is a pod-native container engine for Linux. It is composable, secure, and built on standards.
* TODO Consolidate rkt: https://rocket.readthedocs.io/en/latest/Documentation/commands/ :noexport:
* TODO Fail to run rkt with minikube                               :noexport:
https://github.com/kubernetes/minikube/blob/master/docs/alternative_runtimes.md
#+BEGIN_EXAMPLE
   /Users/zdenny/git_code/code_community/etcd-operator  minikube start \                                                                                                                                                master ✔  ✘ 127
    --network-plugin=cni \
    --container-runtime=rkt
Starting local Kubernetes v1.10.0 cluster...
Starting VM...
Getting VM IP address...
E0101 12:40:48.699186   57765 start.go:210] Error parsing version semver:  Version string empty
Moving files into cluster...
Setting up certs...
Connecting to cluster...
Setting up kubeconfig...
Stopping extra container runtimes...
Starting cluster components...
E0101 12:40:54.743826   57765 start.go:342] Error starting cluster:  kubeadm init error
sudo /usr/bin/kubeadm init --config /var/lib/kubeadm.yaml --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --ignore-preflight-errors=DirAvailable--data-minikube --ignore-preflight-errors=Port-10250 --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-etcd.yaml --ignore-preflight-errors=Swap --ignore-preflight-errors=CRI --ignore-preflight-errors=Service-Docker --ignore-preflight-errors=Port-8443 --ignore-preflight-errors=Port-10251 --ignore-preflight-errors=Port-10252 --ignore-preflight-errors=Port-2379
 running command: : running command:
sudo /usr/bin/kubeadm init --config /var/lib/kubeadm.yaml --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --ignore-preflight-errors=DirAvailable--data-minikube --ignore-preflight-errors=Port-10250 --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-etcd.yaml --ignore-preflight-errors=Swap --ignore-preflight-errors=CRI --ignore-preflight-errors=Service-Docker --ignore-preflight-errors=Port-8443 --ignore-preflight-errors=Port-10251 --ignore-preflight-errors=Port-10252 --ignore-preflight-errors=Port-2379

, output: [init] Using Kubernetes version: v1.10.0
[init] Using Authorization modes: [Node RBAC]
[preflight] Running pre-flight checks.
[preflight] The system verification failed. Printing the output from the verification:
KERNEL_VERSION: 4.15.0
CONFIG_NAMESPACES: enabled
CONFIG_NET_NS: enabled
CONFIG_PID_NS: enabled
CONFIG_IPC_NS: enabled
CONFIG_UTS_NS: enabled
CONFIG_CGROUPS: enabled
CONFIG_CGROUP_CPUACCT: enabled
CONFIG_CGROUP_DEVICE: enabled
CONFIG_CGROUP_FREEZER: enabled
CONFIG_CGROUP_SCHED: enabled
CONFIG_CPUSETS: enabled
CONFIG_MEMCG: enabled
CONFIG_INET: enabled
CONFIG_EXT4_FS: enabled
CONFIG_PROC_FS: enabled
CONFIG_NETFILTER_XT_TARGET_REDIRECT: enabled (as module)
CONFIG_NETFILTER_XT_MATCH_COMMENT: enabled (as module)
CONFIG_OVERLAY_FS: enabled (as module)
CONFIG_AUFS_FS: not set - Required for aufs.
CONFIG_BLK_DEV_DM: enabled
OS: Linux
CGROUPS_CPU: enabled
CGROUPS_CPUACCT: enabled
CGROUPS_CPUSET: enabled
CGROUPS_DEVICES: enabled
CGROUPS_FREEZER: enabled
CGROUPS_MEMORY: enabled
	[WARNING Service-Docker]: docker service is not enabled, please run 'systemctl enable docker.service'
	[WARNING Service-Docker]: docker service is not active, please run 'systemctl start docker.service'
	[WARNING Swap]: running with swap on is not supported. Please disable swap
Flag --admission-control has been deprecated, Use --enable-admission-plugins or --disable-admission-plugins instead. Will be removed in a future version.
[preflight] Some fatal errors occurred:
	[ERROR SystemVerification]: failed to get docker info: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
: Process exited with status 2

#+END_EXAMPLE
* TODO https://coreos.com/rkt/docs/latest/rkt-vs-other-projects.html :noexport:

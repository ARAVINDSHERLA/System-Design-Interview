* CheatSheet: DevOps & Software Development Life Cycle                 :Tool:
:PROPERTIES:
:type:     tool
:export_file_name: cheatsheet-devops-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-devops-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>

<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/blob/master/cheatsheet-devops-A4/cheatsheet-devops-A4.pdf][cheatsheet-devops-A4.pdf]], Category: [[https://cheatsheet.dennyzhang.com/category/tool/][tool]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-devops-A4
- Related posts: [[https://cheatsheet.dennyzhang.com/cheatsheet-container-compliance-A4][CheatSheet: Container Compliance]], [[https://cheatsheet.dennyzhang.com/cheatsheet-linux-security-A4][Cheatsheet: Linux Security]] [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]

File me [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/issues][Issues]] or star [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com][this repo]].
** Overview
| Name                                               | Summary                                                            |
|----------------------------------------------------+--------------------------------------------------------------------|
| =Automate, Automate, Automate=                     | Avoid manual effort and reduce process delay                       |
| =Unify= the ways of doing the same thing           | Build code, test features, etc. Thus reduce invalid failures       |
| Enable =faster iteration= by reducing dependencies | Implement or leverage mockup services                              |
| Definition of unit tests                           | Unit tests focus on function-level scope                           |
| Definition of integration tests                    | Does integration tests include setup an entire system to validate? |
| Definition of e2e tests                            |                                                                    |
| Reference                                          | [[https://cheatsheet.dennyzhang.com/cheatsheet-container-compliance-A4][CheatSheet: Container Compliance]]                                   |
| Reference                                          | [[https://cheatsheet.dennyzhang.com/cheatsheet-DevOps-A4][CheatSheet: DevOps & Software Development Life Cycle]]               |
** Use container for CI/CD
| Name                                       | Summary                                                                 |
|--------------------------------------------+-------------------------------------------------------------------------|
| Dockerd hang issue                         | docker build image hang; docker stop container hang; docker prune hang; |
| Make sure dockerd up-to-date               | dockerd might have known issues or improvements                         |
| More CPU/RAM for dockerd machine           | machine is overloaded                                                   |
| Use ephemeral dockerd machines for testing | cats vs cattle                                                          |
| Dockerd storage driver: overlay2           |                                                                         |
| Free disk of /var/lib is slow              |                                                                         |

** Network dependency download flaky
| Name                      | Summary |
|---------------------------+---------|
| Mirror the external repos |         |
| Add retry for downloading |         |
** Code Build
| Name                                             | Summary                                                      |
|--------------------------------------------------+--------------------------------------------------------------|
| Unify different ways of building code            | =docker build= vs =make/mvn/gradle=                          |
| List versions & enforce prelight check           | List versions and dependencies, thus people can easily debug |
| Reduce pulling dependencies from internet/GitHub | Modify iptables rules in the build box to enforce it         |
| Automatically recommend build after validation   |                                                              |
** Pre-Merge Hook
| Name                                                          | Summary                                                      |
|---------------------------------------------------------------+--------------------------------------------------------------|
| Pre-merge tests help to limit trouble shooting to individuals | This reduce cross-team join-effort debugging                 |
| Code lint checks                                              |                                                              |
| Unit test/BDD tests                                           |                                                              |
| Monitor test coverage                                         | Test coverage includes unit test and integration test suites |
** Component Tests
| Name                                    | Summary |
|-----------------------------------------+---------|
| Move tests closer to develoers' machine |         |
| Utilize mockup services                 |         |
| Test component individually             |         |
| Test component quickly                  |         |
** Integration Tests
| Name                                                          | Summary                                                |
|---------------------------------------------------------------+--------------------------------------------------------|
| Define lightweight and heavyweight e2e tests                  |                                                        |
| Examine log for errors/exceptions, even for successful builds |                                                        |
| Airgap deployment and tests                                   |                                                        |
| Track the data of successful builds                           | logs, timespan for each stage, etc                     |
| Testbed management for complicated projects                   | vanilla testbed validator                              |
| Enforce nightly builds and file tickets for each new failure  |                                                        |
| Seperate dependencies failures from code issues               | Document the failures from unmanaged dependencies      |
| Examine build/test pipelines for performance tuning           | Slowness may from test workflow or products themselves |
** Additional Tests
| Name            | Summary                                                           |
|-----------------+-------------------------------------------------------------------|
| Test categories | Chaos/Longevity tests, Workload tests, Upgrade tests, Scale tests |
** Speedup process
| Name                                           | Summary                             |
|------------------------------------------------+-------------------------------------|
| Speed up the review and merge of pull requests |                                     |
| Reminders for team members                     | Regular meeting; regular activities |
** DevSecOps
| Name                                      | Summary                                       |
|-------------------------------------------+-----------------------------------------------|
| Enforce compliance check for OSS packages | Avoid legal issues and security vulnerability |
| Log scan for security compliance          |                                               |
| Don't save credentials in code repo       |                                               |
| Don't display credentials in log files    |                                               |
** Metrics-Driven Quality Control
| Name        | Summary                                                                  |
|-------------+--------------------------------------------------------------------------|
| Key Metrics | Pass rate for acceptance e2e pipeline; Pass rate for code build pipeline |
** Product Debuggability
| Name                                    | Summary                                       |
|-----------------------------------------+-----------------------------------------------|
| Components can switch log level on fly  |                                               |
| Watch out log velocity and values       | Log tons of useless entries would be annoying |
| Implement a docker tool: =health_check= |                                               |
** More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].
#+BEGIN_HTML
 <a href="https://cheatsheet.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>
 <a href="https://cheatsheet.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>

 <a href="https://www.linkedin.com/in/dennyzhang001"><img align="bottom" src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a>
 <a href="https://github.com/dennyzhang"><img align="bottom"src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a>
 <a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img align="bottom" src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-devops-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-devops-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-devops-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-devops-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO local notes                                                 :noexport:
** TODO [#A] To speed up tests, how to run shell commands in a managed and parallel way? :noexport:
** TODO [#A] Lesson learned: make sure you have plan B, in case original plan not only fails, but also make damages
** TODO [#A] Lesson learned: After remove old tenant, we should verify new env: in case wrong deletion
** TODO [#A] Lesson learned: We should not remove backup immediately after restore: remove after data cleanup in prod env
** TODO Lesson learned: DB in different envs choose different password, in case we perform actions in wrong servers
** TODO [#A] DevOps lesson learned: ask yourself, what if current actions mess up? :IMPORTANT:
** TODO DevOps lesson learned: need to get developers' verification, after each critical action
** TODO [#A] DevOps lesson learned: avoid change /etc/hosts, which may run commands in a wrong server
** TODO [#A] DevOps lesson learned: When change removing multiple tenants, delete one, then wait and verify, before delete more
